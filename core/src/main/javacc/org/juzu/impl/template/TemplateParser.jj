options
{
	TOKEN_EXTENDS = "OffsetToken";
}

PARSER_BEGIN(TemplateParser)

package org.juzu.impl.template;

import java.util.ArrayList;
import org.juzu.utils.Location;

/** Simplate brace matcher */

public class TemplateParser {

  private Token head;
	
	public ArrayList<ASTNode.Section > list = new ArrayList<ASTNode.Section >();

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
//  Simple1 parser = new Simple1(System.in);
//  parser.Input();

  }

}

PARSER_END(TemplateParser)

<DEFAULT> TOKEN:
{
< OPEN_SCRIPTLET : "<%" > : IN_SCRIPTLET |
< OPEN_EXPR : "<%="  > : IN_EXPR |
< OPEN_CURLY_EXPR : "${" > : IN_CURLY_EXPR |
< DATA : ~[] >
}

<IN_SCRIPTLET> TOKEN:
{
< CLOSE_SCRIPTLET : "%>" > : DEFAULT |
< SCRIPTLET_DATA : ~[] >
}

<IN_EXPR> TOKEN:
{
< CLOSE_EXPR : "%>" > : DEFAULT |
< EXPR_DATA : ~[] >
}

<IN_CURLY_EXPR> TOKEN:
{
< CLOSE_CURLY_EXPR : "}" > : DEFAULT |
< CURLY_EXPR_DATA : ~[] >
}

Token parse() :
{
  head = token;  Token t;  StringBuilder acc = new StringBuilder();  
}
{
  (
	  parseScriptlet() |
		parseExpression() |
		parseCurlyExpression() |
    <DATA>
  ) *
  {
    return head;  
  }
}

void parseScriptlet() : { Token o,t,p; StringBuilder acc = new StringBuilder(); }
{
	o = <OPEN_SCRIPTLET> ( t = <SCRIPTLET_DATA> { acc.append(t.image.charAt(0)); } ) * p = <CLOSE_SCRIPTLET>
	{
		list.add(new ASTNode.Section(
					SectionType.SCRIPTLET,
					o.beginOffset,
					p.endOffset,
					acc.toString(),
					new Location(o.beginColumn, o.beginLine),
					new Location(p.endColumn, p.endLine)));
	}	
}

void parseExpression() : { Token o,t,p; StringBuilder acc = new StringBuilder();  }
{
	o = <OPEN_EXPR> ( t = <EXPR_DATA> { acc.append(t.image.charAt(0)); } ) * p = <CLOSE_EXPR>
	{
		list.add(new ASTNode.Section(
					SectionType.EXPR,
					o.beginOffset,
					p.endOffset,
					acc.toString(),
					new Location(o.beginColumn, o.beginLine),
					new Location(p.endColumn, p.endLine)));
	}
}

void parseCurlyExpression() : { Token o,t,p; StringBuilder acc = new StringBuilder();  }
{
	o = <OPEN_CURLY_EXPR> ( t = <CURLY_EXPR_DATA> { acc.append(t.image.charAt(0)); } ) * p = <CLOSE_CURLY_EXPR>
	{
		list.add(new ASTNode.Section(
					SectionType.EXPR,
					o.beginOffset,
					p.endOffset,
					acc.toString(),
					new Location(o.beginColumn, o.beginLine),
					new Location(p.endColumn, p.endLine)));
	}
}
