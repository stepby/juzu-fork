options
{
	TOKEN_EXTENDS = "OffsetToken";
}

PARSER_BEGIN(TemplateParser)

package org.juzu.impl.template;

import java.util.ArrayList;
import org.juzu.utils.Location;
import java.util.HashMap;

/** Simplate brace matcher */

public class TemplateParser {

  ArrayList<ASTNode.Block > list = new ArrayList<ASTNode.Block >();
}

PARSER_END(TemplateParser)

<DEFAULT> TOKEN:
{
< OPEN_SCRIPTLET : "<%" > : IN_SCRIPTLET |
< OPEN_EXPR : "<%="  > : IN_EXPR |
< OPEN_CURLY_EXPR : "${" > : IN_CURLY_EXPR |
< OPEN_URL : "@{" > : IN_URL |
< DATA : ~[] >
}

<IN_SCRIPTLET> TOKEN:
{
< CLOSE_SCRIPTLET : "%>" > : DEFAULT |
< SCRIPTLET_DATA : ~[] >
}

<IN_EXPR> TOKEN:
{
< CLOSE_EXPR : "%>" > : DEFAULT |
< EXPR_DATA : ~[] >
}

<IN_CURLY_EXPR> TOKEN:
{
< CLOSE_CURLY_EXPR : "}" > : DEFAULT |
<  CURLY_EXPR_DATA : ~[] >
}

<IN_URL> TOKEN:
{
< METHOD_NAME : ["$","A"-"Z","_","a"-"z"] ( ["$","0"-"9","A"-"Z","_","a"-"z"] ) * > |
<	OPEN_METHOD : "(" > : IN_URL_ARGS |
< CLOSE_URL : "}" > : DEFAULT
}

<IN_URL_ARGS> TOKEN:
{
< ARG_SEPERATOR : "," > |
< ARG_NAME : ["$","A"-"Z","_","a"-"z"] ( ["$","0"-"9","A"-"Z","_","a"-"z"] ) * > |
< ARG_VALUE : "=" ( ~[",",")"] ) + > |
< CLOSE_METHOD : ")" > : IN_URL
}

< IN_URL_ARGS > SKIP:
{
  " " | "\t"}

void parse() : { }
{
  (
	  parseScriptlet() |
		parseExpression() |
		parseCurlyExpression() |
		parseURL() |
    <DATA>
  ) *
  {
  }
}

void parseScriptlet() : { Token o,t,p; StringBuilder acc = new StringBuilder(); }
{
	o = <OPEN_SCRIPTLET> ( t = <SCRIPTLET_DATA> { acc.append(t.image.charAt(0)); } ) * p = <CLOSE_SCRIPTLET>
	{
		list.add(new ASTNode.Section(
					SectionType.SCRIPTLET,
					o.beginOffset,
					p.endOffset,
					acc.toString(),
					new Location(o.beginColumn, o.beginLine),
					new Location(p.endColumn, p.endLine)));
	}	
}

void parseExpression() : { Token o,t,p; StringBuilder acc = new StringBuilder();  }
{
	o = <OPEN_EXPR> ( t = <EXPR_DATA> { acc.append(t.image.charAt(0)); } ) * p = <CLOSE_EXPR>
	{
		list.add(new ASTNode.Section(
					SectionType.EXPR,
					o.beginOffset,
					p.endOffset,
					acc.toString(),
					new Location(o.beginColumn, o.beginLine),
					new Location(p.endColumn, p.endLine)));
	}
}

void parseCurlyExpression() : { Token o,t,p; StringBuilder acc = new StringBuilder();  }
{
	o = <OPEN_CURLY_EXPR> ( t = <CURLY_EXPR_DATA> { acc.append(t.image.charAt(0)); } ) * p = <CLOSE_CURLY_EXPR>
	{
		list.add(new ASTNode.Section(
					SectionType.EXPR,
					o.beginOffset,
					p.endOffset,
					acc.toString(),
					new Location(o.beginColumn, o.beginLine),
					new Location(p.endColumn, p.endLine)));
	}
}

void parseURL() : { Token t,m,p; HashMap.SimpleEntry a; HashMap args = new HashMap(); }
{
	t = <OPEN_URL> m = <METHOD_NAME> <OPEN_METHOD>
		( a = parseArg() { args.put(a.getKey(), a.getValue()); } ( <ARG_SEPERATOR> a = parseArg() { args.put(a.getKey(), a.getValue()); } ) * ) ?
		<CLOSE_METHOD> p = <CLOSE_URL>
		{
			//String s = args.toString();
			list.add(new ASTNode.URL(
						m.image,
						args,
						t.beginOffset,
						p.endOffset,
						new Location(t.endColumn, t.endLine),
						new Location(p.endColumn, p.endLine)));
		}
}

HashMap.SimpleEntry parseArg() : { Token n,v; }
{
	n = <ARG_NAME> v = <ARG_VALUE>
	{
		return new HashMap.SimpleEntry(n.image.trim(), v.image.substring(1).trim());
	}
}
